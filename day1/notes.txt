Everythign in python is object
** Every object contains methods ***

python objects
------------------s

number
------
number can be integer or decimal or hexa or octal.

string
------
string is defined in single or double or triple quotes.

aname = 'python programming'
bname = "unix shell"
cname = """java programming"""


list ( array in C)
-------------------------
list contains set of elements.
Elements can be numbers or strings or any combination.

alist = [10,20,30,40]
blist = ["java","unix",45,3,45.43]



tuple ( immutable , uneditable , unchangeable)
-------
tuple also contains set of elements.
Elements can be numbers or strings or any combination.

atup = (45,3,43,32)


empdb = [["rao","US"],["rita","UK"]] # list of lists
empdb = [("rao","UK"),("rita","US")] # list of tuples

dictionary ( json ,  hashmap   hash   associativearrary record  map object  containers)
----------
dictionary is all about keys and values.
In dictionary , keys are unique

syntax:   object = { key:value , key:value , key:value}
example:   book  = {"chap1":10 , "chap2":20 ,"chap3":30}


index
------
chap1  10
chap2  20
chap3  30
chap4  40
chap5  40



set ( venn diagrams)
-----
set is UNOREDEREd collection of UNIQUE elements of same type.


aset = {10,10,10,20,30}




function | definition | block | subroutine 
--------------------------------------------------
- reusability purpose



builting functions
user defined functions



How to display all the builtin functions ?
-----------------------------------------------

dir(__builtins__)




user defined functions
--------------------------
user defined function starts with def keywoard.


passing arguments
-------------------
fixed arguments
default arguments
keyword arguments
variable length arguments



file handling 
------------------
read  (r)
write ( w)
append ( a)

opening the file
-----------------------
syntax:   object = open(filename, mode)
example:    fr  = open("customers.txt","r")
            # file should exist to read the file

            fw = open("customers.txt","w")
            #case1: If the file is not existing... file will be created first
            #case2: If the file is already existing... it ovewrites the existing content
        
            fa = open("customers.txt","a")
            #case1: If the file is not existing... file will be created first
            #case2: If the file is already existing... it appends the new content
        

closing the file
-------------------
fr.close()


reading the file
-------------------------
1.reading the file line by line using file object
2. fobj.readlines()
3. fobj.read()
4. using csv library
5. using pandas library

writing to the file 
----------------------
fobj.write()
fobj.writes()
using csv library
using pandas library


exception handling
--------------------------
There are 2 types of errors

1. syntax error
2. semantic error or runtime error or logical error

Handling the errors that occurs during runtime is known as exception handling

try
except
else 
finally 
raise



library | module | package | routines
-----------------------------------------------
Every library contains set of methods for  a task.

builtin libraries
third party libraries


builtin libraries : all the builtin libraires whicha are generally used are installed with python.


third party libraries : depending on the requirement, we install third party library

ALl the third party libraries are available in www.pypi.org


Installing third party library
-----------------------------------------

installing using pip
--------------------------
pip install libraryname    # if  version is not mentioned.. it installs latest version
pip intall matplotlib
pip intall matplotlib==3.10.0



instaling using requirements.txt
------------------------------------------



requirements.txt
---------------------
numpy
pandas
matplotlib


In the command prompt
-----------------------
pip install -r requirements.txt





there are two programming methodologies
----------------------------------------
procedural programming
object oriented programming



object oriented programming principles
-------------------------------------
class
object
abstraction
inheritance
polymorphism
- function overloading
- operator overloading



class
------
Every class contains data members(attributes) and member functions( methods)
Class is like a blueprint of the house

object
------
Object is the instance of the class.


self
-------
self is the instance of the object





pandas
- methods
- data cleansing
- outliers
- processing
- statistics
numpy,scipy
pandas + matplotlib

regression alogirhtms